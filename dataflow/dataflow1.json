{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fail_csv",
						"type": "DatasetReference"
					},
					"name": "failSink"
				},
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiCollection1",
						"type": "DatasetReference"
					},
					"name": "successSink"
				}
			],
			"transformations": [
				{
					"name": "DistinctRows"
				},
				{
					"name": "LookForNULLs"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Title as string,",
				"          Rating as string,",
				"          {Main Director} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> DistinctRows",
				"DistinctRows split(contains(array(columns()),isNull(#item)),",
				"     disjoint: false) ~> LookForNULLs@(hasNULLs, noNULLs)",
				"LookForNULLs@hasNULLs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          mycols as string,",
				"          Title as string,",
				"          Rating as string,",
				"          {Main Director} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> failSink",
				"LookForNULLs@noNULLs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Main Director} as string,",
				"          mycols as string,",
				"          Rating as string,",
				"          Title as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'document',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> successSink"
			]
		}
	}
}